<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="869.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="869.00"> </text><svg id="frames" x="10" width="1180" total_samples="75095"><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (25 samples, 0.03%)</title><rect x="0.0080%" y="533" width="0.0333%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="25"/><text x="0.2580%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (25 samples, 0.03%)</title><rect x="0.0080%" y="517" width="0.0333%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="25"/><text x="0.2580%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.03%)</title><rect x="0.0080%" y="501" width="0.0333%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="25"/><text x="0.2580%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.03%)</title><rect x="0.0080%" y="485" width="0.0333%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="25"/><text x="0.2580%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.03%)</title><rect x="0.0080%" y="469" width="0.0333%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="25"/><text x="0.2580%" y="479.50"></text></g><g><title>cfree (25 samples, 0.03%)</title><rect x="0.0080%" y="453" width="0.0333%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="25"/><text x="0.2580%" y="463.50"></text></g><g><title>__munmap (25 samples, 0.03%)</title><rect x="0.0080%" y="437" width="0.0333%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="25"/><text x="0.2580%" y="447.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (25 samples, 0.03%)</title><rect x="0.0080%" y="421" width="0.0333%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="25"/><text x="0.2580%" y="431.50"></text></g><g><title>do_syscall_64 (25 samples, 0.03%)</title><rect x="0.0080%" y="405" width="0.0333%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="25"/><text x="0.2580%" y="415.50"></text></g><g><title>__x64_sys_munmap (25 samples, 0.03%)</title><rect x="0.0080%" y="389" width="0.0333%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="25"/><text x="0.2580%" y="399.50"></text></g><g><title>__vm_munmap (25 samples, 0.03%)</title><rect x="0.0080%" y="373" width="0.0333%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="25"/><text x="0.2580%" y="383.50"></text></g><g><title>do_mas_munmap (25 samples, 0.03%)</title><rect x="0.0080%" y="357" width="0.0333%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="25"/><text x="0.2580%" y="367.50"></text></g><g><title>do_mas_align_munmap (25 samples, 0.03%)</title><rect x="0.0080%" y="341" width="0.0333%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="25"/><text x="0.2580%" y="351.50"></text></g><g><title>unmap_region (25 samples, 0.03%)</title><rect x="0.0080%" y="325" width="0.0333%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="25"/><text x="0.2580%" y="335.50"></text></g><g><title>unmap_vmas (21 samples, 0.03%)</title><rect x="0.0133%" y="309" width="0.0280%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="21"/><text x="0.2633%" y="319.50"></text></g><g><title>unmap_page_range (21 samples, 0.03%)</title><rect x="0.0133%" y="293" width="0.0280%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="21"/><text x="0.2633%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (9 samples, 0.01%)</title><rect x="0.0413%" y="453" width="0.0120%" height="15" fill="rgb(225,20,46)" fg:x="31" fg:w="9"/><text x="0.2913%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.01%)</title><rect x="0.0413%" y="437" width="0.0120%" height="15" fill="rgb(210,31,41)" fg:x="31" fg:w="9"/><text x="0.2913%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.01%)</title><rect x="0.0413%" y="421" width="0.0120%" height="15" fill="rgb(221,200,47)" fg:x="31" fg:w="9"/><text x="0.2913%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.01%)</title><rect x="0.0413%" y="405" width="0.0120%" height="15" fill="rgb(226,26,5)" fg:x="31" fg:w="9"/><text x="0.2913%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="0.0413%" y="389" width="0.0120%" height="15" fill="rgb(249,33,26)" fg:x="31" fg:w="9"/><text x="0.2913%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.01%)</title><rect x="0.0413%" y="373" width="0.0120%" height="15" fill="rgb(235,183,28)" fg:x="31" fg:w="9"/><text x="0.2913%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.01%)</title><rect x="0.0413%" y="357" width="0.0120%" height="15" fill="rgb(221,5,38)" fg:x="31" fg:w="9"/><text x="0.2913%" y="367.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.01%)</title><rect x="0.0413%" y="341" width="0.0120%" height="15" fill="rgb(247,18,42)" fg:x="31" fg:w="9"/><text x="0.2913%" y="351.50"></text></g><g><title>realloc (9 samples, 0.01%)</title><rect x="0.0413%" y="325" width="0.0120%" height="15" fill="rgb(241,131,45)" fg:x="31" fg:w="9"/><text x="0.2913%" y="335.50"></text></g><g><title>mremap (8 samples, 0.01%)</title><rect x="0.0426%" y="309" width="0.0107%" height="15" fill="rgb(249,31,29)" fg:x="32" fg:w="8"/><text x="0.2926%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 0.01%)</title><rect x="0.0426%" y="293" width="0.0107%" height="15" fill="rgb(225,111,53)" fg:x="32" fg:w="8"/><text x="0.2926%" y="303.50"></text></g><g><title>do_syscall_64 (8 samples, 0.01%)</title><rect x="0.0426%" y="277" width="0.0107%" height="15" fill="rgb(238,160,17)" fg:x="32" fg:w="8"/><text x="0.2926%" y="287.50"></text></g><g><title>__do_sys_mremap (8 samples, 0.01%)</title><rect x="0.0426%" y="261" width="0.0107%" height="15" fill="rgb(214,148,48)" fg:x="32" fg:w="8"/><text x="0.2926%" y="271.50"></text></g><g><title>move_vma (8 samples, 0.01%)</title><rect x="0.0426%" y="245" width="0.0107%" height="15" fill="rgb(232,36,49)" fg:x="32" fg:w="8"/><text x="0.2926%" y="255.50"></text></g><g><title>std::io::Read::read_buf::_{{closure}} (136 samples, 0.18%)</title><rect x="0.0559%" y="421" width="0.1811%" height="15" fill="rgb(209,103,24)" fg:x="42" fg:w="136"/><text x="0.3059%" y="431.50"></text></g><g><title>&lt;copy_regression::ChunkReader as std::io::Read&gt;::read (136 samples, 0.18%)</title><rect x="0.0559%" y="405" width="0.1811%" height="15" fill="rgb(229,88,8)" fg:x="42" fg:w="136"/><text x="0.3059%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (134 samples, 0.18%)</title><rect x="0.0586%" y="389" width="0.1784%" height="15" fill="rgb(213,181,19)" fg:x="44" fg:w="134"/><text x="0.3086%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (134 samples, 0.18%)</title><rect x="0.0586%" y="373" width="0.1784%" height="15" fill="rgb(254,191,54)" fg:x="44" fg:w="134"/><text x="0.3086%" y="383.50"></text></g><g><title>[libc.so.6] (134 samples, 0.18%)</title><rect x="0.0586%" y="357" width="0.1784%" height="15" fill="rgb(241,83,37)" fg:x="44" fg:w="134"/><text x="0.3086%" y="367.50"></text></g><g><title>[[amdgpu]] (12 samples, 0.02%)</title><rect x="98.9054%" y="181" width="0.0160%" height="15" fill="rgb(233,36,39)" fg:x="74273" fg:w="12"/><text x="99.1554%" y="191.50"></text></g><g><title>[[amdgpu]] (23 samples, 0.03%)</title><rect x="98.9227%" y="149" width="0.0306%" height="15" fill="rgb(226,3,54)" fg:x="74286" fg:w="23"/><text x="99.1727%" y="159.50"></text></g><g><title>[[amdgpu]] (22 samples, 0.03%)</title><rect x="98.9240%" y="133" width="0.0293%" height="15" fill="rgb(245,192,40)" fg:x="74287" fg:w="22"/><text x="99.1740%" y="143.50"></text></g><g><title>[[amdgpu]] (17 samples, 0.02%)</title><rect x="98.9307%" y="117" width="0.0226%" height="15" fill="rgb(238,167,29)" fg:x="74292" fg:w="17"/><text x="99.1807%" y="127.50"></text></g><g><title>[[amdgpu]] (17 samples, 0.02%)</title><rect x="98.9307%" y="101" width="0.0226%" height="15" fill="rgb(232,182,51)" fg:x="74292" fg:w="17"/><text x="99.1807%" y="111.50"></text></g><g><title>[[amdgpu]] (17 samples, 0.02%)</title><rect x="98.9307%" y="85" width="0.0226%" height="15" fill="rgb(231,60,39)" fg:x="74292" fg:w="17"/><text x="99.1807%" y="95.50"></text></g><g><title>[[amdgpu]] (12 samples, 0.02%)</title><rect x="98.9373%" y="69" width="0.0160%" height="15" fill="rgb(208,69,12)" fg:x="74297" fg:w="12"/><text x="99.1873%" y="79.50"></text></g><g><title>[[amdgpu]] (12 samples, 0.02%)</title><rect x="98.9373%" y="53" width="0.0160%" height="15" fill="rgb(235,93,37)" fg:x="74297" fg:w="12"/><text x="99.1873%" y="63.50"></text></g><g><title>[[amdgpu]] (12 samples, 0.02%)</title><rect x="98.9373%" y="37" width="0.0160%" height="15" fill="rgb(213,116,39)" fg:x="74297" fg:w="12"/><text x="99.1873%" y="47.50"></text></g><g><title>[[amdgpu]] (47 samples, 0.06%)</title><rect x="98.8974%" y="197" width="0.0626%" height="15" fill="rgb(222,207,29)" fg:x="74267" fg:w="47"/><text x="99.1474%" y="207.50"></text></g><g><title>drm_handle_vblank (29 samples, 0.04%)</title><rect x="98.9214%" y="181" width="0.0386%" height="15" fill="rgb(206,96,30)" fg:x="74285" fg:w="29"/><text x="99.1714%" y="191.50"></text></g><g><title>drm_update_vblank_count (29 samples, 0.04%)</title><rect x="98.9214%" y="165" width="0.0386%" height="15" fill="rgb(218,138,4)" fg:x="74285" fg:w="29"/><text x="99.1714%" y="175.50"></text></g><g><title>[[gpu_sched]] (9 samples, 0.01%)</title><rect x="98.9666%" y="165" width="0.0120%" height="15" fill="rgb(250,191,14)" fg:x="74319" fg:w="9"/><text x="99.2166%" y="175.50"></text></g><g><title>dma_fence_signal (8 samples, 0.01%)</title><rect x="98.9680%" y="149" width="0.0107%" height="15" fill="rgb(239,60,40)" fg:x="74320" fg:w="8"/><text x="99.2180%" y="159.50"></text></g><g><title>dma_fence_signal_timestamp_locked (8 samples, 0.01%)</title><rect x="98.9680%" y="133" width="0.0107%" height="15" fill="rgb(206,27,48)" fg:x="74320" fg:w="8"/><text x="99.2180%" y="143.50"></text></g><g><title>dma_fence_signal (20 samples, 0.03%)</title><rect x="98.9626%" y="197" width="0.0266%" height="15" fill="rgb(225,35,8)" fg:x="74316" fg:w="20"/><text x="99.2126%" y="207.50"></text></g><g><title>dma_fence_signal_timestamp_locked (17 samples, 0.02%)</title><rect x="98.9666%" y="181" width="0.0226%" height="15" fill="rgb(250,213,24)" fg:x="74319" fg:w="17"/><text x="99.2166%" y="191.50"></text></g><g><title>__wake_up_common_lock (8 samples, 0.01%)</title><rect x="98.9786%" y="165" width="0.0107%" height="15" fill="rgb(247,123,22)" fg:x="74328" fg:w="8"/><text x="99.2286%" y="175.50"></text></g><g><title>[[amdgpu]] (16 samples, 0.02%)</title><rect x="98.9893%" y="165" width="0.0213%" height="15" fill="rgb(231,138,38)" fg:x="74336" fg:w="16"/><text x="99.2393%" y="175.50"></text></g><g><title>[[amdgpu]] (16 samples, 0.02%)</title><rect x="98.9893%" y="149" width="0.0213%" height="15" fill="rgb(231,145,46)" fg:x="74336" fg:w="16"/><text x="99.2393%" y="159.50"></text></g><g><title>[[amdgpu]] (16 samples, 0.02%)</title><rect x="98.9893%" y="133" width="0.0213%" height="15" fill="rgb(251,118,11)" fg:x="74336" fg:w="16"/><text x="99.2393%" y="143.50"></text></g><g><title>[[amdgpu]] (16 samples, 0.02%)</title><rect x="98.9893%" y="117" width="0.0213%" height="15" fill="rgb(217,147,25)" fg:x="74336" fg:w="16"/><text x="99.2393%" y="127.50"></text></g><g><title>[[amdgpu]] (16 samples, 0.02%)</title><rect x="98.9893%" y="101" width="0.0213%" height="15" fill="rgb(247,81,37)" fg:x="74336" fg:w="16"/><text x="99.2393%" y="111.50"></text></g><g><title>[[amdgpu]] (11 samples, 0.01%)</title><rect x="98.9959%" y="85" width="0.0146%" height="15" fill="rgb(209,12,38)" fg:x="74341" fg:w="11"/><text x="99.2459%" y="95.50"></text></g><g><title>[[amdgpu]] (11 samples, 0.01%)</title><rect x="98.9959%" y="69" width="0.0146%" height="15" fill="rgb(227,1,9)" fg:x="74341" fg:w="11"/><text x="99.2459%" y="79.50"></text></g><g><title>[[amdgpu]] (11 samples, 0.01%)</title><rect x="98.9959%" y="53" width="0.0146%" height="15" fill="rgb(248,47,43)" fg:x="74341" fg:w="11"/><text x="99.2459%" y="63.50"></text></g><g><title>drm_crtc_accurate_vblank_count (18 samples, 0.02%)</title><rect x="98.9893%" y="197" width="0.0240%" height="15" fill="rgb(221,10,30)" fg:x="74336" fg:w="18"/><text x="99.2393%" y="207.50"></text></g><g><title>drm_update_vblank_count (18 samples, 0.02%)</title><rect x="98.9893%" y="181" width="0.0240%" height="15" fill="rgb(210,229,1)" fg:x="74336" fg:w="18"/><text x="99.2393%" y="191.50"></text></g><g><title>[[amdgpu]] (117 samples, 0.16%)</title><rect x="98.8628%" y="213" width="0.1558%" height="15" fill="rgb(222,148,37)" fg:x="74241" fg:w="117"/><text x="99.1128%" y="223.50"></text></g><g><title>[[amdgpu]] (149 samples, 0.20%)</title><rect x="98.8215%" y="245" width="0.1984%" height="15" fill="rgb(234,67,33)" fg:x="74210" fg:w="149"/><text x="99.0715%" y="255.50"></text></g><g><title>[[amdgpu]] (129 samples, 0.17%)</title><rect x="98.8481%" y="229" width="0.1718%" height="15" fill="rgb(247,98,35)" fg:x="74230" fg:w="129"/><text x="99.0981%" y="239.50"></text></g><g><title>[[amdgpu]] (163 samples, 0.22%)</title><rect x="98.8082%" y="261" width="0.2171%" height="15" fill="rgb(247,138,52)" fg:x="74200" fg:w="163"/><text x="99.0582%" y="271.50"></text></g><g><title>[[amdgpu]] (167 samples, 0.22%)</title><rect x="98.8042%" y="277" width="0.2224%" height="15" fill="rgb(213,79,30)" fg:x="74197" fg:w="167"/><text x="99.0542%" y="287.50"></text></g><g><title>__handle_irq_event_percpu (201 samples, 0.27%)</title><rect x="98.7989%" y="293" width="0.2677%" height="15" fill="rgb(246,177,23)" fg:x="74193" fg:w="201"/><text x="99.0489%" y="303.50"></text></g><g><title>xhci_irq (30 samples, 0.04%)</title><rect x="99.0266%" y="277" width="0.0399%" height="15" fill="rgb(230,62,27)" fg:x="74364" fg:w="30"/><text x="99.2766%" y="287.50"></text></g><g><title>handle_irq_event (203 samples, 0.27%)</title><rect x="98.7989%" y="309" width="0.2703%" height="15" fill="rgb(216,154,8)" fg:x="74193" fg:w="203"/><text x="99.0489%" y="319.50"></text></g><g><title>__common_interrupt (216 samples, 0.29%)</title><rect x="98.7855%" y="341" width="0.2876%" height="15" fill="rgb(244,35,45)" fg:x="74183" fg:w="216"/><text x="99.0355%" y="351.50"></text></g><g><title>handle_edge_irq (210 samples, 0.28%)</title><rect x="98.7935%" y="325" width="0.2796%" height="15" fill="rgb(251,115,12)" fg:x="74189" fg:w="210"/><text x="99.0435%" y="335.50"></text></g><g><title>common_interrupt (235 samples, 0.31%)</title><rect x="98.7855%" y="357" width="0.3129%" height="15" fill="rgb(240,54,50)" fg:x="74183" fg:w="235"/><text x="99.0355%" y="367.50"></text></g><g><title>__irq_exit_rcu (19 samples, 0.03%)</title><rect x="99.0732%" y="341" width="0.0253%" height="15" fill="rgb(233,84,52)" fg:x="74399" fg:w="19"/><text x="99.3232%" y="351.50"></text></g><g><title>__do_softirq (18 samples, 0.02%)</title><rect x="99.0745%" y="325" width="0.0240%" height="15" fill="rgb(207,117,47)" fg:x="74400" fg:w="18"/><text x="99.3245%" y="335.50"></text></g><g><title>tasklet_action_common.isra.0 (18 samples, 0.02%)</title><rect x="99.0745%" y="309" width="0.0240%" height="15" fill="rgb(249,43,39)" fg:x="74400" fg:w="18"/><text x="99.3245%" y="319.50"></text></g><g><title>usb_giveback_urb_bh (16 samples, 0.02%)</title><rect x="99.0772%" y="293" width="0.0213%" height="15" fill="rgb(209,38,44)" fg:x="74402" fg:w="16"/><text x="99.3272%" y="303.50"></text></g><g><title>__usb_hcd_giveback_urb (15 samples, 0.02%)</title><rect x="99.0785%" y="277" width="0.0200%" height="15" fill="rgb(236,212,23)" fg:x="74403" fg:w="15"/><text x="99.3285%" y="287.50"></text></g><g><title>asm_common_interrupt (238 samples, 0.32%)</title><rect x="98.7842%" y="373" width="0.3169%" height="15" fill="rgb(242,79,21)" fg:x="74182" fg:w="238"/><text x="99.0342%" y="383.50"></text></g><g><title>clear_huge_page (96 samples, 0.13%)</title><rect x="99.1371%" y="277" width="0.1278%" height="15" fill="rgb(211,96,35)" fg:x="74447" fg:w="96"/><text x="99.3871%" y="287.50"></text></g><g><title>clear_page_erms (93 samples, 0.12%)</title><rect x="99.1411%" y="261" width="0.1238%" height="15" fill="rgb(253,215,40)" fg:x="74450" fg:w="93"/><text x="99.3911%" y="271.50"></text></g><g><title>clear_page_erms (136 samples, 0.18%)</title><rect x="99.2716%" y="213" width="0.1811%" height="15" fill="rgb(211,81,21)" fg:x="74548" fg:w="136"/><text x="99.5216%" y="223.50"></text></g><g><title>do_huge_pmd_anonymous_page (240 samples, 0.32%)</title><rect x="99.1344%" y="293" width="0.3196%" height="15" fill="rgb(208,190,38)" fg:x="74445" fg:w="240"/><text x="99.3844%" y="303.50"></text></g><g><title>vma_alloc_folio (140 samples, 0.19%)</title><rect x="99.2676%" y="277" width="0.1864%" height="15" fill="rgb(235,213,38)" fg:x="74545" fg:w="140"/><text x="99.5176%" y="287.50"></text></g><g><title>__folio_alloc (140 samples, 0.19%)</title><rect x="99.2676%" y="261" width="0.1864%" height="15" fill="rgb(237,122,38)" fg:x="74545" fg:w="140"/><text x="99.5176%" y="271.50"></text></g><g><title>__alloc_pages (140 samples, 0.19%)</title><rect x="99.2676%" y="245" width="0.1864%" height="15" fill="rgb(244,218,35)" fg:x="74545" fg:w="140"/><text x="99.5176%" y="255.50"></text></g><g><title>get_page_from_freelist (140 samples, 0.19%)</title><rect x="99.2676%" y="229" width="0.1864%" height="15" fill="rgb(240,68,47)" fg:x="74545" fg:w="140"/><text x="99.5176%" y="239.50"></text></g><g><title>clear_page_erms (12 samples, 0.02%)</title><rect x="99.4647%" y="229" width="0.0160%" height="15" fill="rgb(210,16,53)" fg:x="74693" fg:w="12"/><text x="99.7147%" y="239.50"></text></g><g><title>handle_mm_fault (279 samples, 0.37%)</title><rect x="99.1211%" y="325" width="0.3715%" height="15" fill="rgb(235,124,12)" fg:x="74435" fg:w="279"/><text x="99.3711%" y="335.50"></text></g><g><title>__handle_mm_fault (278 samples, 0.37%)</title><rect x="99.1224%" y="309" width="0.3702%" height="15" fill="rgb(224,169,11)" fg:x="74436" fg:w="278"/><text x="99.3724%" y="319.50"></text></g><g><title>vma_alloc_folio (24 samples, 0.03%)</title><rect x="99.4607%" y="293" width="0.0320%" height="15" fill="rgb(250,166,2)" fg:x="74690" fg:w="24"/><text x="99.7107%" y="303.50"></text></g><g><title>__folio_alloc (24 samples, 0.03%)</title><rect x="99.4607%" y="277" width="0.0320%" height="15" fill="rgb(242,216,29)" fg:x="74690" fg:w="24"/><text x="99.7107%" y="287.50"></text></g><g><title>__alloc_pages (24 samples, 0.03%)</title><rect x="99.4607%" y="261" width="0.0320%" height="15" fill="rgb(230,116,27)" fg:x="74690" fg:w="24"/><text x="99.7107%" y="271.50"></text></g><g><title>get_page_from_freelist (23 samples, 0.03%)</title><rect x="99.4620%" y="245" width="0.0306%" height="15" fill="rgb(228,99,48)" fg:x="74691" fg:w="23"/><text x="99.7120%" y="255.50"></text></g><g><title>rmqueue_bulk (9 samples, 0.01%)</title><rect x="99.4807%" y="229" width="0.0120%" height="15" fill="rgb(253,11,6)" fg:x="74705" fg:w="9"/><text x="99.7307%" y="239.50"></text></g><g><title>__list_del_entry_valid (9 samples, 0.01%)</title><rect x="99.4807%" y="213" width="0.0120%" height="15" fill="rgb(247,143,39)" fg:x="74705" fg:w="9"/><text x="99.7307%" y="223.50"></text></g><g><title>exc_page_fault (282 samples, 0.38%)</title><rect x="99.1211%" y="357" width="0.3755%" height="15" fill="rgb(236,97,10)" fg:x="74435" fg:w="282"/><text x="99.3711%" y="367.50"></text></g><g><title>do_user_addr_fault (282 samples, 0.38%)</title><rect x="99.1211%" y="341" width="0.3755%" height="15" fill="rgb(233,208,19)" fg:x="74435" fg:w="282"/><text x="99.3711%" y="351.50"></text></g><g><title>asm_exc_page_fault (298 samples, 0.40%)</title><rect x="99.1011%" y="373" width="0.3968%" height="15" fill="rgb(216,164,2)" fg:x="74420" fg:w="298"/><text x="99.3511%" y="383.50"></text></g><g><title>irqentry_exit_to_user_mode (18 samples, 0.02%)</title><rect x="99.5166%" y="357" width="0.0240%" height="15" fill="rgb(220,129,5)" fg:x="74732" fg:w="18"/><text x="99.7666%" y="367.50"></text></g><g><title>exit_to_user_mode_prepare (18 samples, 0.02%)</title><rect x="99.5166%" y="341" width="0.0240%" height="15" fill="rgb(242,17,10)" fg:x="74732" fg:w="18"/><text x="99.7666%" y="351.50"></text></g><g><title>schedule (12 samples, 0.02%)</title><rect x="99.5246%" y="325" width="0.0160%" height="15" fill="rgb(242,107,0)" fg:x="74738" fg:w="12"/><text x="99.7746%" y="335.50"></text></g><g><title>__schedule (12 samples, 0.02%)</title><rect x="99.5246%" y="309" width="0.0160%" height="15" fill="rgb(251,28,31)" fg:x="74738" fg:w="12"/><text x="99.7746%" y="319.50"></text></g><g><title>__irq_exit_rcu (8 samples, 0.01%)</title><rect x="99.5432%" y="341" width="0.0107%" height="15" fill="rgb(233,223,10)" fg:x="74752" fg:w="8"/><text x="99.7932%" y="351.50"></text></g><g><title>tick_sched_do_timer (22 samples, 0.03%)</title><rect x="99.5832%" y="277" width="0.0293%" height="15" fill="rgb(215,21,27)" fg:x="74782" fg:w="22"/><text x="99.8332%" y="287.50"></text></g><g><title>update_wall_time (17 samples, 0.02%)</title><rect x="99.5899%" y="261" width="0.0226%" height="15" fill="rgb(232,23,21)" fg:x="74787" fg:w="17"/><text x="99.8399%" y="271.50"></text></g><g><title>timekeeping_advance (17 samples, 0.02%)</title><rect x="99.5899%" y="245" width="0.0226%" height="15" fill="rgb(244,5,23)" fg:x="74787" fg:w="17"/><text x="99.8399%" y="255.50"></text></g><g><title>timekeeping_update (11 samples, 0.01%)</title><rect x="99.5978%" y="229" width="0.0146%" height="15" fill="rgb(226,81,46)" fg:x="74793" fg:w="11"/><text x="99.8478%" y="239.50"></text></g><g><title>account_user_time (8 samples, 0.01%)</title><rect x="99.6178%" y="245" width="0.0107%" height="15" fill="rgb(247,70,30)" fg:x="74808" fg:w="8"/><text x="99.8678%" y="255.50"></text></g><g><title>amd_pmu_disable_all (8 samples, 0.01%)</title><rect x="99.6644%" y="213" width="0.0107%" height="15" fill="rgb(212,68,19)" fg:x="74843" fg:w="8"/><text x="99.9144%" y="223.50"></text></g><g><title>perf_event_task_tick (21 samples, 0.03%)</title><rect x="99.6538%" y="229" width="0.0280%" height="15" fill="rgb(240,187,13)" fg:x="74835" fg:w="21"/><text x="99.9038%" y="239.50"></text></g><g><title>update_curr (22 samples, 0.03%)</title><rect x="99.7070%" y="213" width="0.0293%" height="15" fill="rgb(223,113,26)" fg:x="74875" fg:w="22"/><text x="99.9570%" y="223.50"></text></g><g><title>task_tick_fair (60 samples, 0.08%)</title><rect x="99.6857%" y="229" width="0.0799%" height="15" fill="rgb(206,192,2)" fg:x="74859" fg:w="60"/><text x="99.9357%" y="239.50"></text></g><g><title>update_load_avg (22 samples, 0.03%)</title><rect x="99.7363%" y="213" width="0.0293%" height="15" fill="rgb(241,108,4)" fg:x="74897" fg:w="22"/><text x="99.9863%" y="223.50"></text></g><g><title>scheduler_tick (103 samples, 0.14%)</title><rect x="99.6405%" y="245" width="0.1372%" height="15" fill="rgb(247,173,49)" fg:x="74825" fg:w="103"/><text x="99.8905%" y="255.50"></text></g><g><title>update_rq_clock (9 samples, 0.01%)</title><rect x="99.7656%" y="229" width="0.0120%" height="15" fill="rgb(224,114,35)" fg:x="74919" fg:w="9"/><text x="100.0156%" y="239.50"></text></g><g><title>tick_sched_timer (147 samples, 0.20%)</title><rect x="99.5832%" y="293" width="0.1958%" height="15" fill="rgb(245,159,27)" fg:x="74782" fg:w="147"/><text x="99.8332%" y="303.50"></text></g><g><title>tick_sched_handle (125 samples, 0.17%)</title><rect x="99.6125%" y="277" width="0.1665%" height="15" fill="rgb(245,172,44)" fg:x="74804" fg:w="125"/><text x="99.8625%" y="287.50"></text></g><g><title>update_process_times (124 samples, 0.17%)</title><rect x="99.6138%" y="261" width="0.1651%" height="15" fill="rgb(236,23,11)" fg:x="74805" fg:w="124"/><text x="99.8638%" y="271.50"></text></g><g><title>__wake_up_common_lock (9 samples, 0.01%)</title><rect x="99.7803%" y="245" width="0.0120%" height="15" fill="rgb(205,117,38)" fg:x="74930" fg:w="9"/><text x="100.0303%" y="255.50"></text></g><g><title>__wake_up_common (9 samples, 0.01%)</title><rect x="99.7803%" y="229" width="0.0120%" height="15" fill="rgb(237,72,25)" fg:x="74930" fg:w="9"/><text x="100.0303%" y="239.50"></text></g><g><title>ep_autoremove_wake_function (8 samples, 0.01%)</title><rect x="99.7816%" y="213" width="0.0107%" height="15" fill="rgb(244,70,9)" fg:x="74931" fg:w="8"/><text x="100.0316%" y="223.50"></text></g><g><title>try_to_wake_up (8 samples, 0.01%)</title><rect x="99.7816%" y="197" width="0.0107%" height="15" fill="rgb(217,125,39)" fg:x="74931" fg:w="8"/><text x="100.0316%" y="207.50"></text></g><g><title>__wake_up_common (10 samples, 0.01%)</title><rect x="99.7803%" y="277" width="0.0133%" height="15" fill="rgb(235,36,10)" fg:x="74930" fg:w="10"/><text x="100.0303%" y="287.50"></text></g><g><title>ep_poll_callback (10 samples, 0.01%)</title><rect x="99.7803%" y="261" width="0.0133%" height="15" fill="rgb(251,123,47)" fg:x="74930" fg:w="10"/><text x="100.0303%" y="271.50"></text></g><g><title>timerfd_tmrproc (12 samples, 0.02%)</title><rect x="99.7789%" y="293" width="0.0160%" height="15" fill="rgb(221,13,13)" fg:x="74929" fg:w="12"/><text x="100.0289%" y="303.50"></text></g><g><title>__hrtimer_run_queues (179 samples, 0.24%)</title><rect x="99.5646%" y="309" width="0.2384%" height="15" fill="rgb(238,131,9)" fg:x="74768" fg:w="179"/><text x="99.8146%" y="319.50"></text></g><g><title>__sysvec_apic_timer_interrupt (193 samples, 0.26%)</title><rect x="99.5539%" y="341" width="0.2570%" height="15" fill="rgb(211,50,8)" fg:x="74760" fg:w="193"/><text x="99.8039%" y="351.50"></text></g><g><title>hrtimer_interrupt (189 samples, 0.25%)</title><rect x="99.5592%" y="325" width="0.2517%" height="15" fill="rgb(245,182,24)" fg:x="74764" fg:w="189"/><text x="99.8092%" y="335.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (238 samples, 0.32%)</title><rect x="99.4980%" y="373" width="0.3169%" height="15" fill="rgb(242,14,37)" fg:x="74718" fg:w="238"/><text x="99.7480%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (206 samples, 0.27%)</title><rect x="99.5406%" y="357" width="0.2743%" height="15" fill="rgb(246,228,12)" fg:x="74750" fg:w="206"/><text x="99.7906%" y="367.50"></text></g><g><title>__rseq_handle_notify_resume (16 samples, 0.02%)</title><rect x="99.8402%" y="325" width="0.0213%" height="15" fill="rgb(213,55,15)" fg:x="74975" fg:w="16"/><text x="100.0902%" y="335.50"></text></g><g><title>__get_user_8 (16 samples, 0.02%)</title><rect x="99.8402%" y="309" width="0.0213%" height="15" fill="rgb(209,9,3)" fg:x="74975" fg:w="16"/><text x="100.0902%" y="319.50"></text></g><g><title>amd_pmu_disable_all (8 samples, 0.01%)</title><rect x="99.8828%" y="277" width="0.0107%" height="15" fill="rgb(230,59,30)" fg:x="75007" fg:w="8"/><text x="100.1328%" y="287.50"></text></g><g><title>x86_pmu_disable_all (8 samples, 0.01%)</title><rect x="99.8828%" y="261" width="0.0107%" height="15" fill="rgb(209,121,21)" fg:x="75007" fg:w="8"/><text x="100.1328%" y="271.50"></text></g><g><title>__perf_event_task_sched_out (19 samples, 0.03%)</title><rect x="99.8695%" y="293" width="0.0253%" height="15" fill="rgb(220,109,13)" fg:x="74997" fg:w="19"/><text x="100.1195%" y="303.50"></text></g><g><title>__perf_event_task_sched_in (13 samples, 0.02%)</title><rect x="99.8948%" y="277" width="0.0173%" height="15" fill="rgb(232,18,1)" fg:x="75016" fg:w="13"/><text x="100.1448%" y="287.50"></text></g><g><title>amd_pmu_enable_all (13 samples, 0.02%)</title><rect x="99.8948%" y="261" width="0.0173%" height="15" fill="rgb(215,41,42)" fg:x="75016" fg:w="13"/><text x="100.1448%" y="271.50"></text></g><g><title>x86_pmu_enable_event (13 samples, 0.02%)</title><rect x="99.8948%" y="245" width="0.0173%" height="15" fill="rgb(224,123,36)" fg:x="75016" fg:w="13"/><text x="100.1448%" y="255.50"></text></g><g><title>native_write_msr (13 samples, 0.02%)</title><rect x="99.8948%" y="229" width="0.0173%" height="15" fill="rgb(240,125,3)" fg:x="75016" fg:w="13"/><text x="100.1448%" y="239.50"></text></g><g><title>finish_task_switch.isra.0 (14 samples, 0.02%)</title><rect x="99.8948%" y="293" width="0.0186%" height="15" fill="rgb(205,98,50)" fg:x="75016" fg:w="14"/><text x="100.1448%" y="303.50"></text></g><g><title>put_prev_task_fair (21 samples, 0.03%)</title><rect x="99.9201%" y="293" width="0.0280%" height="15" fill="rgb(205,185,37)" fg:x="75035" fg:w="21"/><text x="100.1701%" y="303.50"></text></g><g><title>put_prev_entity (20 samples, 0.03%)</title><rect x="99.9214%" y="277" width="0.0266%" height="15" fill="rgb(238,207,15)" fg:x="75036" fg:w="20"/><text x="100.1714%" y="287.50"></text></g><g><title>update_load_avg (12 samples, 0.02%)</title><rect x="99.9321%" y="261" width="0.0160%" height="15" fill="rgb(213,199,42)" fg:x="75044" fg:w="12"/><text x="100.1821%" y="271.50"></text></g><g><title>irqentry_exit_to_user_mode (82 samples, 0.11%)</title><rect x="99.8402%" y="357" width="0.1092%" height="15" fill="rgb(235,201,11)" fg:x="74975" fg:w="82"/><text x="100.0902%" y="367.50"></text></g><g><title>exit_to_user_mode_prepare (82 samples, 0.11%)</title><rect x="99.8402%" y="341" width="0.1092%" height="15" fill="rgb(207,46,11)" fg:x="74975" fg:w="82"/><text x="100.0902%" y="351.50"></text></g><g><title>schedule (66 samples, 0.09%)</title><rect x="99.8615%" y="325" width="0.0879%" height="15" fill="rgb(241,35,35)" fg:x="74991" fg:w="66"/><text x="100.1115%" y="335.50"></text></g><g><title>__schedule (66 samples, 0.09%)</title><rect x="99.8615%" y="309" width="0.0879%" height="15" fill="rgb(243,32,47)" fg:x="74991" fg:w="66"/><text x="100.1115%" y="319.50"></text></g><g><title>asm_sysvec_reschedule_ipi (96 samples, 0.13%)</title><rect x="99.8256%" y="373" width="0.1278%" height="15" fill="rgb(247,202,23)" fg:x="74964" fg:w="96"/><text x="100.0756%" y="383.50"></text></g><g><title>irq_entries_start (13 samples, 0.02%)</title><rect x="99.9561%" y="373" width="0.0173%" height="15" fill="rgb(219,102,11)" fg:x="75062" fg:w="13"/><text x="100.2061%" y="383.50"></text></g><g><title>std::io::copy::copy (75,048 samples, 99.94%)</title><rect x="0.0413%" y="533" width="99.9374%" height="15" fill="rgb(243,110,44)" fg:x="31" fg:w="75048"/><text x="0.2913%" y="543.50">std::io::copy::copy</text></g><g><title>std::sys::unix::kernel_copy::copy_spec (75,048 samples, 99.94%)</title><rect x="0.0413%" y="517" width="99.9374%" height="15" fill="rgb(222,74,54)" fg:x="31" fg:w="75048"/><text x="0.2913%" y="527.50">std::sys::unix::kernel_copy::copy_spec</text></g><g><title>&lt;std::sys::unix::kernel_copy::Copier&lt;R,W&gt; as std::sys::unix::kernel_copy::SpecCopy&gt;::copy (75,048 samples, 99.94%)</title><rect x="0.0413%" y="501" width="99.9374%" height="15" fill="rgb(216,99,12)" fg:x="31" fg:w="75048"/><text x="0.2913%" y="511.50">&lt;std::sys::unix::kernel_copy::Copier&lt;R,W&gt; as std::sys::unix::kernel_copy::SpecCopy&gt;::copy</text></g><g><title>std::io::copy::generic_copy (75,048 samples, 99.94%)</title><rect x="0.0413%" y="485" width="99.9374%" height="15" fill="rgb(226,22,26)" fg:x="31" fg:w="75048"/><text x="0.2913%" y="495.50">std::io::copy::generic_copy</text></g><g><title>&lt;alloc::vec::Vec&lt;u8,A&gt; as std::io::copy::BufferedWriterSpec&gt;::copy_from (75,048 samples, 99.94%)</title><rect x="0.0413%" y="469" width="99.9374%" height="15" fill="rgb(217,163,10)" fg:x="31" fg:w="75048"/><text x="0.2913%" y="479.50">&lt;alloc::vec::Vec&lt;u8,A&gt; as std::io::copy::BufferedWriterSpec&gt;::copy_from</text></g><g><title>std::io::Read::read_buf (75,037 samples, 99.92%)</title><rect x="0.0559%" y="453" width="99.9228%" height="15" fill="rgb(213,25,53)" fg:x="42" fg:w="75037"/><text x="0.3059%" y="463.50">std::io::Read::read_buf</text></g><g><title>std::io::default_read_buf (75,037 samples, 99.92%)</title><rect x="0.0559%" y="437" width="99.9228%" height="15" fill="rgb(252,105,26)" fg:x="42" fg:w="75037"/><text x="0.3059%" y="447.50">std::io::default_read_buf</text></g><g><title>std::io::readbuf::BorrowedCursor::ensure_init (74,901 samples, 99.74%)</title><rect x="0.2370%" y="421" width="99.7417%" height="15" fill="rgb(220,39,43)" fg:x="178" fg:w="74901"/><text x="0.4870%" y="431.50">std::io::readbuf::BorrowedCursor::ensure_init</text></g><g><title>core::intrinsics::write_bytes (74,901 samples, 99.74%)</title><rect x="0.2370%" y="405" width="99.7417%" height="15" fill="rgb(229,68,48)" fg:x="178" fg:w="74901"/><text x="0.4870%" y="415.50">core::intrinsics::write_bytes</text></g><g><title>[libc.so.6] (74,901 samples, 99.74%)</title><rect x="0.2370%" y="389" width="99.7417%" height="15" fill="rgb(252,8,32)" fg:x="178" fg:w="74901"/><text x="0.4870%" y="399.50">[libc.so.6]</text></g><g><title>std::panic::catch_unwind (75,074 samples, 99.97%)</title><rect x="0.0080%" y="661" width="99.9720%" height="15" fill="rgb(223,20,43)" fg:x="6" fg:w="75074"/><text x="0.2580%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (75,074 samples, 99.97%)</title><rect x="0.0080%" y="645" width="99.9720%" height="15" fill="rgb(229,81,49)" fg:x="6" fg:w="75074"/><text x="0.2580%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (75,074 samples, 99.97%)</title><rect x="0.0080%" y="629" width="99.9720%" height="15" fill="rgb(236,28,36)" fg:x="6" fg:w="75074"/><text x="0.2580%" y="639.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (75,074 samples, 99.97%)</title><rect x="0.0080%" y="613" width="99.9720%" height="15" fill="rgb(249,185,26)" fg:x="6" fg:w="75074"/><text x="0.2580%" y="623.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (75,074 samples, 99.97%)</title><rect x="0.0080%" y="597" width="99.9720%" height="15" fill="rgb(249,174,33)" fg:x="6" fg:w="75074"/><text x="0.2580%" y="607.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (75,074 samples, 99.97%)</title><rect x="0.0080%" y="581" width="99.9720%" height="15" fill="rgb(233,201,37)" fg:x="6" fg:w="75074"/><text x="0.2580%" y="591.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (75,074 samples, 99.97%)</title><rect x="0.0080%" y="565" width="99.9720%" height="15" fill="rgb(221,78,26)" fg:x="6" fg:w="75074"/><text x="0.2580%" y="575.50">core::ops::function::FnOnce::call_once</text></g><g><title>copy_regression::main (75,074 samples, 99.97%)</title><rect x="0.0080%" y="549" width="99.9720%" height="15" fill="rgb(250,127,30)" fg:x="6" fg:w="75074"/><text x="0.2580%" y="559.50">copy_regression::main</text></g><g><title>_start (75,075 samples, 99.97%)</title><rect x="0.0080%" y="805" width="99.9734%" height="15" fill="rgb(230,49,44)" fg:x="6" fg:w="75075"/><text x="0.2580%" y="815.50">_start</text></g><g><title>__libc_start_main (75,075 samples, 99.97%)</title><rect x="0.0080%" y="789" width="99.9734%" height="15" fill="rgb(229,67,23)" fg:x="6" fg:w="75075"/><text x="0.2580%" y="799.50">__libc_start_main</text></g><g><title>[libc.so.6] (75,075 samples, 99.97%)</title><rect x="0.0080%" y="773" width="99.9734%" height="15" fill="rgb(249,83,47)" fg:x="6" fg:w="75075"/><text x="0.2580%" y="783.50">[libc.so.6]</text></g><g><title>main (75,075 samples, 99.97%)</title><rect x="0.0080%" y="757" width="99.9734%" height="15" fill="rgb(215,43,3)" fg:x="6" fg:w="75075"/><text x="0.2580%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (75,075 samples, 99.97%)</title><rect x="0.0080%" y="741" width="99.9734%" height="15" fill="rgb(238,154,13)" fg:x="6" fg:w="75075"/><text x="0.2580%" y="751.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (75,075 samples, 99.97%)</title><rect x="0.0080%" y="725" width="99.9734%" height="15" fill="rgb(219,56,2)" fg:x="6" fg:w="75075"/><text x="0.2580%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (75,075 samples, 99.97%)</title><rect x="0.0080%" y="709" width="99.9734%" height="15" fill="rgb(233,0,4)" fg:x="6" fg:w="75075"/><text x="0.2580%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (75,075 samples, 99.97%)</title><rect x="0.0080%" y="693" width="99.9734%" height="15" fill="rgb(235,30,7)" fg:x="6" fg:w="75075"/><text x="0.2580%" y="703.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (75,075 samples, 99.97%)</title><rect x="0.0080%" y="677" width="99.9734%" height="15" fill="rgb(250,79,13)" fg:x="6" fg:w="75075"/><text x="0.2580%" y="687.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>copy_regression (75,085 samples, 99.99%)</title><rect x="0.0000%" y="821" width="99.9867%" height="15" fill="rgb(211,146,34)" fg:x="0" fg:w="75085"/><text x="0.2500%" y="831.50">copy_regression</text></g><g><title>all (75,095 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(228,22,38)" fg:x="0" fg:w="75095"/><text x="0.2500%" y="847.50"></text></g><g><title>perf-exec (10 samples, 0.01%)</title><rect x="99.9867%" y="821" width="0.0133%" height="15" fill="rgb(235,168,5)" fg:x="75085" fg:w="10"/><text x="100.2367%" y="831.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (10 samples, 0.01%)</title><rect x="99.9867%" y="805" width="0.0133%" height="15" fill="rgb(221,155,16)" fg:x="75085" fg:w="10"/><text x="100.2367%" y="815.50"></text></g><g><title>do_syscall_64 (10 samples, 0.01%)</title><rect x="99.9867%" y="789" width="0.0133%" height="15" fill="rgb(215,215,53)" fg:x="75085" fg:w="10"/><text x="100.2367%" y="799.50"></text></g><g><title>__x64_sys_execve (10 samples, 0.01%)</title><rect x="99.9867%" y="773" width="0.0133%" height="15" fill="rgb(223,4,10)" fg:x="75085" fg:w="10"/><text x="100.2367%" y="783.50"></text></g><g><title>do_execveat_common.isra.0 (10 samples, 0.01%)</title><rect x="99.9867%" y="757" width="0.0133%" height="15" fill="rgb(234,103,6)" fg:x="75085" fg:w="10"/><text x="100.2367%" y="767.50"></text></g><g><title>bprm_execve (10 samples, 0.01%)</title><rect x="99.9867%" y="741" width="0.0133%" height="15" fill="rgb(227,97,0)" fg:x="75085" fg:w="10"/><text x="100.2367%" y="751.50"></text></g><g><title>load_elf_binary (10 samples, 0.01%)</title><rect x="99.9867%" y="725" width="0.0133%" height="15" fill="rgb(234,150,53)" fg:x="75085" fg:w="10"/><text x="100.2367%" y="735.50"></text></g><g><title>begin_new_exec (10 samples, 0.01%)</title><rect x="99.9867%" y="709" width="0.0133%" height="15" fill="rgb(228,201,54)" fg:x="75085" fg:w="10"/><text x="100.2367%" y="719.50"></text></g><g><title>perf_event_exec (10 samples, 0.01%)</title><rect x="99.9867%" y="693" width="0.0133%" height="15" fill="rgb(222,22,37)" fg:x="75085" fg:w="10"/><text x="100.2367%" y="703.50"></text></g><g><title>perf_lock_task_context (10 samples, 0.01%)</title><rect x="99.9867%" y="677" width="0.0133%" height="15" fill="rgb(237,53,32)" fg:x="75085" fg:w="10"/><text x="100.2367%" y="687.50"></text></g></svg></svg>